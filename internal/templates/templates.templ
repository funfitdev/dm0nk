package templates

import "dm0nk/internal/models"

templ Layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title }</title>
			<link rel="stylesheet" href="/static/app.css"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet"/>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<script src="https://unpkg.com/lucide@latest"></script>
		</head>
		<body class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
			<nav class="bg-white/80 backdrop-blur-md border-b border-gray-200 sticky top-0 z-50">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-16">
						<div class="flex items-center">
							<div class="flex-shrink-0">
								<h1 class="text-xl font-bold text-gray-900">dm0nk</h1>
							</div>
							<div class="hidden md:block ml-10">
								<div class="flex items-baseline space-x-4">
									<a href="/" class="text-gray-900 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200">Notes</a>
									<a href="/recordings" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200">Recordings</a>
									<a href="/page-1" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200">Page 1</a>
									<a href="/page-2" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200">Page 2</a>
									<a href="/about" class="text-gray-600 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200">About</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</nav>
			<main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
				{ children... }
			</main>
			<script>
				// Simple script for view transitions - no complex direction detection needed
				document.addEventListener('DOMContentLoaded', function() {
					console.log('View Transition API ready - using gentle fade transitions');
					// Initialize Lucide icons
					lucide.createIcons();
					
					// Initialize voice recording if on home page
					if (document.getElementById('recordButton')) {
						initVoiceRecording();
					}
					
					// Initialize audio player functionality for recordings page
					if (document.querySelector('.play-recording-btn')) {
						initAudioPlayers();
					}
				});

				// Audio player functionality for recordings page
				function initAudioPlayers() {
					document.addEventListener('click', function(e) {
						if (e.target.closest('.play-recording-btn')) {
							const btn = e.target.closest('.play-recording-btn');
							const filename = btn.getAttribute('data-filename');
							playRecording(filename);
						}
					});
				}

				// Audio player functionality
				function playRecording(filename) {
					const playerId = 'player-' + filename;
					const playerDiv = document.getElementById(playerId);
					const audio = playerDiv.querySelector('audio');
					
					// Toggle player visibility
					if (playerDiv.classList.contains('hidden')) {
						playerDiv.classList.remove('hidden');
						audio.load(); // Load the audio
						audio.play();
					} else {
						if (audio.paused) {
							audio.play();
						} else {
							audio.pause();
						}
					}
				}

				function initVoiceRecording() {
					let mediaRecorder;
					let audioChunks = [];
					let isRecording = false;
					let silenceTimer;
					let audioContext;
					let analyser;
					let microphone;
					let dataArray;
					let silenceThreshold = 30; // Adjust this value based on testing
					let silenceDelay = 5000; // 5 seconds

					const recordButton = document.getElementById('recordButton');
					const recordingIndicator = document.getElementById('recordingIndicator');
					const recordingStatus = document.getElementById('recordingStatus');
					const recordingFeedback = document.getElementById('recordingFeedback');
					const micIcon = recordButton.querySelector('[data-lucide="mic"]');

					recordButton.addEventListener('click', toggleRecording);

					async function toggleRecording() {
						if (isRecording) {
							stopRecording();
						} else {
							await startRecording();
						}
					}

					async function startRecording() {
						try {
							const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
							
							// Set up MediaRecorder
							mediaRecorder = new MediaRecorder(stream);
							audioChunks = [];
							
							// Set up audio analysis for silence detection
							audioContext = new (window.AudioContext || window.webkitAudioContext)();
							analyser = audioContext.createAnalyser();
							microphone = audioContext.createMediaStreamSource(stream);
							microphone.connect(analyser);
							
							analyser.smoothingTimeConstant = 0.8;
							analyser.fftSize = 1024;
							dataArray = new Uint8Array(analyser.frequencyBinCount);

							mediaRecorder.ondataavailable = (event) => {
								audioChunks.push(event.data);
							};

							mediaRecorder.onstop = () => {
								const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
								uploadAudio(audioBlob);
								stream.getTracks().forEach(track => track.stop());
								if (audioContext) audioContext.close();
							};

							mediaRecorder.start();
							isRecording = true;
							updateUI();
							checkForSilence();

						} catch (error) {
							console.error('Error accessing microphone:', error);
							recordingFeedback.textContent = 'Error: Could not access microphone';
							recordingFeedback.className = 'mt-2 text-sm font-medium text-red-600';
						}
					}

					function stopRecording() {
						if (mediaRecorder && isRecording) {
							clearTimeout(silenceTimer);
							mediaRecorder.stop();
							isRecording = false;
							updateUI();
						}
					}

					function checkForSilence() {
						if (!isRecording) return;

						analyser.getByteFrequencyData(dataArray);
						const average = dataArray.reduce((a, b) => a + b) / dataArray.length;

						if (average < silenceThreshold) {
							if (!silenceTimer) {
								silenceTimer = setTimeout(() => {
									recordingStatus.textContent = 'Silence detected - stopping recording...';
									stopRecording();
								}, silenceDelay);
							}
						} else {
							if (silenceTimer) {
								clearTimeout(silenceTimer);
								silenceTimer = null;
							}
						}

						if (isRecording) {
							requestAnimationFrame(checkForSilence);
						}
					}

					function updateUI() {
						if (isRecording) {
							recordButton.className = 'w-20 h-20 bg-red-600 rounded-full flex items-center justify-center transition-all duration-200 mx-auto shadow-lg transform scale-110';
							recordingIndicator.classList.remove('hidden');
							recordingStatus.textContent = 'Recording... (will stop after 5s of silence)';
							recordingStatus.className = 'mt-4 text-sm text-red-600';
							micIcon.setAttribute('data-lucide', 'mic-off');
						} else {
							recordButton.className = 'w-20 h-20 bg-red-500 hover:bg-red-600 rounded-full flex items-center justify-center transition-all duration-200 mx-auto shadow-lg';
							recordingIndicator.classList.add('hidden');
							recordingStatus.textContent = '';
							micIcon.setAttribute('data-lucide', 'mic');
						}
						lucide.createIcons();
					}

					async function uploadAudio(audioBlob) {
						recordingFeedback.textContent = 'Uploading recording...';
						recordingFeedback.className = 'mt-2 text-sm font-medium text-blue-600';

						const formData = new FormData();
						const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
						formData.append('audio', audioBlob, `recording-${timestamp}.wav`);

						try {
							const response = await fetch('/api/recordings', {
								method: 'POST',
								body: formData
							});

							if (response.ok) {
								const result = await response.json();
								recordingFeedback.textContent = 'Recording saved successfully!';
								recordingFeedback.className = 'mt-2 text-sm font-medium text-green-600';
								setTimeout(() => {
									recordingFeedback.textContent = '';
								}, 3000);
							} else {
								throw new Error('Upload failed');
							}
						} catch (error) {
							console.error('Error uploading audio:', error);
							recordingFeedback.textContent = 'Error: Failed to save recording';
							recordingFeedback.className = 'mt-2 text-sm font-medium text-red-600';
						}
					}
				}
			</script>
		</body>
	</html>
}

templ HomePage(title string) {
	@Layout("Home - dm0nk") {
		<div class="px-4 py-8">
			<!-- Hero Section -->
			<div class="text-center mb-16">
				<h1 class="text-5xl md:text-7xl font-bold text-gray-900 mb-6">{ title }</h1>
				<p class="text-xl text-gray-600 max-w-2xl mx-auto mb-8">
					A modern web server built with cutting-edge technologies for exceptional performance and developer experience.
				</p>
				<div class="flex flex-col sm:flex-row gap-4 justify-center">
					<a href="/notes" class="inline-flex items-center px-8 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200">
						View Notes
						<i data-lucide="arrow-right" class="ml-2 -mr-1 w-5 h-5"></i>
					</a>
					<a href="/about" class="inline-flex items-center px-8 py-3 border border-gray-300 text-base font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
						Learn More
					</a>
				</div>
				<!-- Voice Recording Section -->
				<div class="mt-12 text-center">
					<div class="max-w-md mx-auto">
						<h3 class="text-xl font-semibold text-gray-900 mb-4">Voice Notes</h3>
						<p class="text-gray-600 mb-6">Record your thoughts instantly with voice notes</p>
						<div class="relative">
							<button id="recordButton" class="w-20 h-20 bg-red-500 hover:bg-red-600 rounded-full flex items-center justify-center transition-all duration-200 mx-auto shadow-lg">
								<i data-lucide="mic" class="w-8 h-8 text-white"></i>
							</button>
							<div id="recordingIndicator" class="absolute inset-0 rounded-full border-4 border-red-400 animate-pulse hidden"></div>
						</div>
						<div id="recordingStatus" class="mt-4 text-sm text-gray-600 h-6"></div>
						<div id="recordingFeedback" class="mt-2 text-sm font-medium h-6"></div>
						<a href="/recordings" class="mt-4 inline-flex items-center text-blue-600 hover:text-blue-800 text-sm font-medium">
							<i data-lucide="headphones" class="w-4 h-4 mr-2"></i>
							View Recordings
						</a>
					</div>
				</div>
			</div>
			<!-- Features Section -->
			<div class="grid md:grid-cols-3 gap-8 mb-16">
				<div class="text-center p-6 bg-white rounded-xl shadow-sm border border-gray-100">
					<div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4">
						<i data-lucide="zap" class="w-6 h-6 text-blue-600"></i>
					</div>
					<h3 class="text-lg font-semibold text-gray-900 mb-2">Lightning Fast</h3>
					<p class="text-gray-600">Built with Go for exceptional performance and concurrent request handling.</p>
				</div>
				<div class="text-center p-6 bg-white rounded-xl shadow-sm border border-gray-100">
					<div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4">
						<i data-lucide="check-circle" class="w-6 h-6 text-green-600"></i>
					</div>
					<h3 class="text-lg font-semibold text-gray-900 mb-2">Type Safe</h3>
					<p class="text-gray-600">Leverages templ for compile-time HTML template validation and safety.</p>
				</div>
				<div class="text-center p-6 bg-white rounded-xl shadow-sm border border-gray-100">
					<div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4">
						<i data-lucide="layers" class="w-6 h-6 text-purple-600"></i>
					</div>
					<h3 class="text-lg font-semibold text-gray-900 mb-2">Modern Stack</h3>
					<p class="text-gray-600">Uses cutting-edge tools like Tailwind CSS and HTMX for great UX.</p>
				</div>
			</div>
		</div>
	}
}

templ AboutPage(title, description string) {
	@Layout("About - dm0nk") {
		<div class="px-4 py-8">
			<div class="max-w-4xl mx-auto">
				<!-- Header -->
				<div class="text-center mb-12">
					<h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">{ title }</h1>
					<p class="text-xl text-gray-600 max-w-2xl mx-auto">{ description }</p>
				</div>
				<!-- Features List -->
				<div class="grid md:grid-cols-2 gap-8 mb-12">
					<div class="space-y-6">
						<h2 class="text-2xl font-semibold text-gray-900">Technology Stack</h2>
						<div class="space-y-4">
							<div class="flex items-center space-x-3 p-4 bg-white rounded-lg shadow-sm border border-gray-100">
								<div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
									<i data-lucide="code" class="w-5 h-5 text-blue-600"></i>
								</div>
								<div>
									<h3 class="font-semibold text-gray-900">Go Backend</h3>
									<p class="text-sm text-gray-600">High-performance server with excellent concurrency</p>
								</div>
							</div>
							<div class="flex items-center space-x-3 p-4 bg-white rounded-lg shadow-sm border border-gray-100">
								<div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
									<i data-lucide="file-text" class="w-5 h-5 text-green-600"></i>
								</div>
								<div>
									<h3 class="font-semibold text-gray-900">Templ for HTML Generation</h3>
									<p class="text-sm text-gray-600">Type-safe templates with compile-time validation</p>
								</div>
							</div>
							<div class="flex items-center space-x-3 p-4 bg-white rounded-lg shadow-sm border border-gray-100">
								<div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
									<i data-lucide="route" class="w-5 h-5 text-purple-600"></i>
								</div>
								<div>
									<h3 class="font-semibold text-gray-900">Chi Router</h3>
									<p class="text-sm text-gray-600">Lightweight and powerful HTTP router</p>
								</div>
							</div>
						</div>
					</div>
					<div class="space-y-6">
						<h2 class="text-2xl font-semibold text-gray-900">Key Features</h2>
						<div class="space-y-4">
							<div class="flex items-start space-x-3">
								<div class="flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mt-0.5">
									<i data-lucide="check" class="w-3 h-3 text-green-600"></i>
								</div>
								<div>
									<h3 class="font-medium text-gray-900">High Performance</h3>
									<p class="text-sm text-gray-600">Optimized for speed and minimal resource usage</p>
								</div>
							</div>
							<div class="flex items-start space-x-3">
								<div class="flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mt-0.5">
									<i data-lucide="check" class="w-3 h-3 text-green-600"></i>
								</div>
								<div>
									<h3 class="font-medium text-gray-900">Developer Experience</h3>
									<p class="text-sm text-gray-600">Modern tooling with hot reload and type safety</p>
								</div>
							</div>
							<div class="flex items-start space-x-3">
								<div class="flex-shrink-0 w-6 h-6 bg-green-100 rounded-full flex items-center justify-center mt-0.5">
									<i data-lucide="check" class="w-3 h-3 text-green-600"></i>
								</div>
								<div>
									<h3 class="font-medium text-gray-900">Responsive Design</h3>
									<p class="text-sm text-gray-600">Beautiful UI that works on all devices</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ NotesIndex(notes []models.Note, hasMore bool, offset int) {
	@Layout("Notes - dm0nk") {
		<div class="px-4">
			<!-- Header -->
			<div class="text-center mb-8">
				<h1 class="text-4xl font-bold text-gray-900 mb-4">Your Notes</h1>
				<p class="text-lg text-gray-600 max-w-2xl mx-auto">
					Explore your thoughts, ideas, and memories in a beautiful masonry layout.
				</p>
			</div>
			<!-- Notes Grid -->
			<div id="notes-container" class="grid grid-cols-1 md:grid-cols-2 gap-6 auto-rows-max">
				for _, note := range notes {
					@NoteCard(note)
				}
			</div>
			<!-- Load More Trigger -->
			if hasMore {
				<div
					id="load-more-trigger"
					hx-get={ "/api/notes?offset=" + intToString(offset) }
					hx-trigger="intersect once"
					hx-target="#notes-container"
					hx-swap="beforeend"
					class="flex justify-center py-8"
				>
					<div class="animate-pulse flex space-x-4">
						<div class="rounded-full bg-gray-300 h-3 w-3"></div>
						<div class="rounded-full bg-gray-300 h-3 w-3"></div>
						<div class="rounded-full bg-gray-300 h-3 w-3"></div>
					</div>
				</div>
			}
		</div>
	}
}

templ NoteCard(note models.Note) {
	<div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-shadow duration-200 break-inside-avoid mb-6">
		<!-- Note Type Badge -->
		<div class="flex items-center justify-between mb-3">
			<span class={ "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium", getNoteTypeBadgeClass(note.Type) }>
				{ note.Type }
			</span>
			<time class="text-xs text-gray-500" datetime={ note.CreatedAt.Format("2006-01-02T15:04:05Z07:00") }>
				{ note.CreatedAt.Format("Jan 2, 2006") }
			</time>
		</div>
		<!-- Note Title -->
		<h3 class="text-lg font-semibold text-gray-900 mb-3 line-clamp-2">{ note.Title }</h3>
		<!-- Note Content Preview -->
		<div class="text-sm text-gray-600 line-clamp-4">
			@NoteContentPreview(note)
		</div>
		<!-- Note Actions -->
		<div class="mt-4 flex items-center justify-between">
			<button class="text-blue-600 hover:text-blue-800 text-sm font-medium">
				Read more
			</button>
			<div class="flex space-x-2">
				<button class="text-gray-400 hover:text-gray-600">
					<i data-lucide="star" class="w-4 h-4"></i>
				</button>
				<button class="text-gray-400 hover:text-gray-600">
					<i data-lucide="share-2" class="w-4 h-4"></i>
				</button>
			</div>
		</div>
	</div>
}

templ NoteCards(notes []models.Note, hasMore bool, offset int) {
	for _, note := range notes {
		@NoteCard(note)
	}
	if hasMore {
		<div
			id="load-more-trigger"
			hx-get={ "/api/notes?offset=" + intToString(offset) }
			hx-trigger="intersect once"
			hx-target="#notes-container"
			hx-swap="beforeend"
			class="flex justify-center py-8 col-span-full"
		>
			<div class="animate-pulse flex space-x-4">
				<div class="rounded-full bg-gray-300 h-3 w-3"></div>
				<div class="rounded-full bg-gray-300 h-3 w-3"></div>
				<div class="rounded-full bg-gray-300 h-3 w-3"></div>
			</div>
		</div>
	}
}

templ NoteContentPreview(note models.Note) {
	if note.Type == "markdown" {
		@MarkdownPreview(note.Data)
	} else if note.Type == "checklist" {
		@ChecklistPreview(note.Data)
	} else if note.Type == "birthdays" {
		@BirthdaysPreview(note.Data)
	} else {
		@TextPreview(note.Data)
	}
}

templ TextPreview(data []byte) {
	<div class="prose prose-sm max-w-none text-gray-600">
		<p>📄 Text note</p>
	</div>
}

templ MarkdownPreview(data []byte) {
	<div class="prose prose-sm max-w-none text-gray-600">
		<p>📝 Markdown document</p>
	</div>
}

templ ChecklistPreview(data []byte) {
	<div class="space-y-1">
		<p class="text-gray-600">✅ Checklist</p>
		<div class="text-xs text-gray-500">Tasks and todos</div>
	</div>
}

templ BirthdaysPreview(data []byte) {
	<div class="space-y-1">
		<p class="text-gray-600">🎂 Birthdays</p>
		<div class="text-xs text-gray-500">Birthday reminders</div>
	</div>
}

templ Page1() {
	@Layout("Page 1 - dm0nk") {
		<div class="px-4 py-8">
			<div class="max-w-4xl mx-auto">
				<!-- Header -->
				<div class="text-center mb-12" style="view-transition-name: shared-hero;">
					<h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4" style="view-transition-name: shared-title;">Page One</h1>
					<p class="text-xl text-gray-600 max-w-2xl mx-auto">Demonstrating smooth fade transitions with shared elements.</p>
				</div>
				<!-- Navigation -->
				<div class="flex justify-center space-x-4 mb-12">
					<a href="/" class="inline-flex items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
						← Back to Notes
					</a>
					<a href="/page-2" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200">
						Go to Page 2 →
					</a>
				</div>
				<!-- Content -->
				<div class="grid md:grid-cols-2 gap-8">
					<div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6" style="view-transition-name: content-card-1;">
						<h2 class="text-2xl font-semibold text-gray-900 mb-4">Gentle Transitions</h2>
						<p class="text-gray-600 mb-4">
							Simple fade transitions that are easy on the eyes. No jarring movements or complex animations.
							Just smooth, peaceful changes between pages.
						</p>
						<ul class="space-y-2 text-sm text-gray-600">
							<li>• Gentle fade in/out</li>
							<li>• Shared element animation</li>
							<li>• Smooth and soothing</li>
							<li>• No jarring effects</li>
						</ul>
					</div>
					<div class="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-xl p-6">
						<h3 class="text-xl font-semibold text-gray-900 mb-4">Features</h3>
						<div class="space-y-3">
							<div class="flex items-center space-x-3">
								<div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
									<i data-lucide="check" class="w-4 h-4 text-blue-600"></i>
								</div>
								<span class="text-gray-700">Peaceful fade transitions</span>
							</div>
							<div class="flex items-center space-x-3">
								<div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
									<i data-lucide="check" class="w-4 h-4 text-blue-600"></i>
								</div>
								<span class="text-gray-700">Shared element animations</span>
							</div>
							<div class="flex items-center space-x-3">
								<div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
									<i data-lucide="check" class="w-4 h-4 text-blue-600"></i>
								</div>
								<span class="text-gray-700">Modern browser API</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ Page2() {
	@Layout("Page 2 - dm0nk") {
		<div class="px-4 py-8">
			<div class="max-w-4xl mx-auto">
				<!-- Header -->
				<div class="text-center mb-12" style="view-transition-name: shared-hero;">
					<h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4" style="view-transition-name: shared-title;">Page Two</h1>
					<p class="text-xl text-gray-600 max-w-2xl mx-auto">Experience gentle fade transitions with shared element animations.</p>
				</div>
				<!-- Navigation -->
				<div class="flex justify-center space-x-4 mb-12">
					<a href="/page-1" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 transition-colors duration-200">
						← Back to Page 1
					</a>
					<a href="/" class="inline-flex items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
						Back to Notes
					</a>
				</div>
				<!-- Content -->
				<div class="space-y-8">
					<!-- Hero Card -->
					<div class="bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl p-8 text-white" style="view-transition-name: content-card-1;">
						<h2 class="text-3xl font-bold mb-4">Peaceful Transitions</h2>
						<p class="text-lg opacity-90 mb-6">
							Gentle fade effects that create a calm, soothing user experience. No harsh movements,
							just smooth and peaceful navigation between pages.
						</p>
						<div class="flex space-x-4">
							<div class="bg-white/20 rounded-lg p-4 flex-1">
								<h3 class="font-semibold mb-2">Gentle Fade</h3>
								<p class="text-sm opacity-80">Smooth opacity transitions</p>
							</div>
							<div class="bg-white/20 rounded-lg p-4 flex-1">
								<h3 class="font-semibold mb-2">Shared Elements</h3>
								<p class="text-sm opacity-80">Connected animated components</p>
							</div>
						</div>
					</div>
					<!-- Feature Grid -->
					<div class="grid md:grid-cols-3 gap-6">
						<div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 text-center">
							<div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4">
								<i data-lucide="zap" class="w-6 h-6 text-purple-600"></i>
							</div>
							<h3 class="text-lg font-semibold text-gray-900 mb-2">Fast</h3>
							<p class="text-gray-600 text-sm">Hardware-accelerated transitions</p>
						</div>
						<div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 text-center">
							<div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4">
								<i data-lucide="check-circle" class="w-6 h-6 text-green-600"></i>
							</div>
							<h3 class="text-lg font-semibold text-gray-900 mb-2">Smooth</h3>
							<p class="text-gray-600 text-sm">Seamless page transitions</p>
						</div>
						<div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 text-center">
							<div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4">
								<i data-lucide="settings" class="w-6 h-6 text-blue-600"></i>
							</div>
							<h3 class="text-lg font-semibold text-gray-900 mb-2">Modern</h3>
							<p class="text-gray-600 text-sm">Latest web standards</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}

templ RecordingsPage(recordings []models.Recording) {
	@Layout("Voice Recordings - dm0nk") {
		<div class="px-4 py-8">
			<div class="max-w-4xl mx-auto">
				<!-- Header -->
				<div class="text-center mb-8">
					<h1 class="text-4xl font-bold text-gray-900 mb-4">Voice Recordings</h1>
					<p class="text-lg text-gray-600 max-w-2xl mx-auto">
						Listen to your recorded voice notes and thoughts.
					</p>
				</div>
				<!-- Navigation -->
				<div class="flex justify-center mb-8">
					<a href="/" class="inline-flex items-center px-6 py-3 border border-gray-300 text-base font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200">
						<i data-lucide="arrow-left" class="w-4 h-4 mr-2"></i>
						Back to Home
					</a>
				</div>
				<!-- Recordings List -->
				if len(recordings) == 0 {
					<div class="text-center py-12">
						<div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
							<i data-lucide="mic" class="w-12 h-12 text-gray-400"></i>
						</div>
						<h3 class="text-lg font-medium text-gray-900 mb-2">No recordings yet</h3>
						<p class="text-gray-600 mb-6">Start recording voice notes from the home page</p>
						<a href="/" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 transition-colors duration-200">
							<i data-lucide="mic" class="w-4 h-4 mr-2"></i>
							Record Now
						</a>
					</div>
				} else {
					<div class="grid gap-4">
						for _, recording := range recordings {
							@RecordingCard(recording)
						}
					</div>
				}
			</div>
		</div>
	}
}

templ RecordingCard(recording models.Recording) {
	<div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-shadow duration-200">
		<div class="flex items-center justify-between">
			<div class="flex items-center space-x-4">
				<div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
					<i data-lucide="volume-2" class="w-6 h-6 text-blue-600"></i>
				</div>
				<div>
					<h3 class="text-lg font-semibold text-gray-900">{ recording.Filename }</h3>
					<p class="text-sm text-gray-600">
						Recorded on { recording.CreatedAt.Format("Jan 2, 2006 at 3:04 PM") }
					</p>
					if recording.Duration > 0 {
						<p class="text-xs text-gray-500">
							Duration: { formatDuration(recording.Duration) }
						</p>
					}
				</div>
			</div>
			<div class="flex items-center space-x-2">
				<button
					data-filename={ recording.Filename }
					class="play-recording-btn inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200"
				>
					<i data-lucide="play" class="w-4 h-4 mr-2"></i>
					Play
				</button>
				<a
					href={ "/api/recordings/" + recording.Filename + "/download" }
					download
					class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 transition-colors duration-200"
				>
					<i data-lucide="download" class="w-4 h-4 mr-2"></i>
					Download
				</a>
			</div>
		</div>
		<!-- Transcription -->
		if recording.ExtractedText != nil && *recording.ExtractedText != "" {
			<div class="mt-4 p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400">
				<div class="flex items-center gap-2 mb-2">
					<i data-lucide="message-circle" class="w-4 h-4 text-blue-600"></i>
					<span class="text-sm font-medium text-blue-800">Transcription</span>
				</div>
				<p class="text-gray-700 text-sm leading-relaxed">{ *recording.ExtractedText }</p>
			</div>
		} else {
			<div class="mt-4 p-3 bg-gray-50 rounded-lg border-l-4 border-gray-300">
				<div class="flex items-center gap-2">
					<i data-lucide="clock" class="w-4 h-4 text-gray-500"></i>
					<span class="text-sm text-gray-600">Transcription not available</span>
				</div>
			</div>
		}
		<!-- Audio Player (hidden by default) -->
		<div id={ "player-" + recording.Filename } class="mt-4 hidden">
			<audio controls class="w-full" preload="none">
				<source src={ "/api/recordings/" + recording.Filename } type="audio/wav"/>
				Your browser does not support the audio element.
			</audio>
		</div>
	</div>
}
